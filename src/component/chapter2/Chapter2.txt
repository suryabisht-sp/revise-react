1. What are hooks in React?
Ans: Hooks are the functions which allows us to use the life cycle method in a functional component.

2. What are life cycle methods?
Ans: lifecycle methods in React are like "phases" a component goes through from the moment it's created to the moment it's removed. 
     These phases help us to control what happens at each step, like setting things up when the component appears on the screen or 
     cleaning up when it's removed.
     #Birth (Mounting): This is when the component is created and placed on the page (like when you're born and start life). 
     During this stage, we might want to fetch data or set up anything the component needs right after it appears.
     #Growth (Updating): The component is already on the page, but it keeps changing (like growing and learning new things). 
     This happens when the data or the component's state changes. Here, we might want to respond to changes in data, 
     like updating the view when the user clicks a button or changes something.
     #Death (Unmounting): This is when the component is removed from the page (like when a person retires or finishes something).
     We might want to clean up resources, like closing connections or stopping timers, when the component is no longer needed.

2.A. Why we can't use life cycle method directly in functional component?
Ans: We can’t use them directly because functional components are simpler and don't have the same structure as class components, 
     where lifecycle methods are typically used. In class components, we have access to lifecycle methods like componentDidMount, 
     componentDidUpdate, and componentWillUnmount because these methods are part of the class structure. 
     A class allows us to define methods and manage component state with this keyword while Functional components are just plain JavaScript 
     functions that take props as input and return JSX. They don't have a built-in mechanism for lifecycle methods 
     because they don't manage internal methods or state the same way classes do.

3. What are the rules of Hooks?
Ans: Hooks can only be called from React functional. Hooks should be called at the top level of a functional component or custom Hook.
     Hooks should not be called conditionally. They need to be called unconditionally on every render to maintain 
     consistent behavior and state management.

4. What is useState Hook?
Ans: It allows us to add state management to functional components. 
    const [input, setInput] = useState()
    here input is the variable which holds the current value, while setInput is the function which handles the state  or
    we can say it update the current state i.e input

5. What is UseReducer Hook?
Ans: The useReducer Hook is the better alternative to the useState hook and is generally more preferred over the useState hook.
     when we have complex state-building logic or when the next state value depends upon its previous value or 
     when the components are needed to be optimized.
     const [state, dispatch] = useReducer(reducer, initialArgs, init);
     Here reducer is the user-defined function that pairs the current state with the dispatch method to handle the state,  
     initialArgs refers to the initial arguments and init is the function to initialize the state lazily.
     #Dispatch: This is a function that we use to send actions to the reducer. Each action object usually has a type property 
     (and possibly other properties) to indicate what kind of update should occur.
     #initialArgs: is provided as the initial state
     #init: parameter is an optional function that allows you to lazily initialize the state. 
     This can be particularly useful when the initial state is complex or expensive to compute.
     example as:
    
     function reducer(state, action) {
          switch (action.type) {
                case 'increment':
                      return { count: state.count + 1 };
                case 'decrement':
                      return { count: state.count - 1 };
                default:
                      throw new Error('Unknown action type');  }
                      }
           // Function to initialize state
          function init(initialCount) {
       // Perform some expensive computation or setup here
          return { count: initialCount };
           }
    
       function Counter() {
          // Use init to lazily initialize the state
            const [state, dispatch] = useReducer(reducer, 0, init);
            }


6. What is useRef Hook?
Ans: The useRef is a hook that allows to directly create a reference to the DOM element in the functional component.
     The main use of useRef hook is to access the DOM elements in a more efficient way as compared to simple refs. 
     Since useRef hooks preserve value across various re-renders and do not cause re-renders whenever a value is changed,
     they make the application faster and helps in caching and storing previous values.
     const refContainer = useRef(initialValue);
     const onClickHandler = () => {
        focusPoint.current.value =
            "Welcome to GeeksforGeeks!";
        focusPoint.current.focus();
        console.log("Textarea ref:",
            focusPoint.current);
    };
    here it will focus the element on Click.

7. What is useEffect Hook?
Ans: In simple words useEffects help components to communicate and coordinate with the world outside of React.
     useEffect(<FUNCTION>, <DEPENDECY>)
     useEffect(()=>{},[])
     such as handling network requests, manipulating the browser’s DOM, managing animations, integrating with widgets from other UI libraries,
     and working with non-React code
     By default, useEffect kicks in after every render, making sure everything stays up to date.
     The square bracket is the dependency array here. This array specifies values that the effect depends on. 
     If any of these values change between renders, the effect will run again. If the array is empty, 
     the effect only runs once after the initial render.
     #Cleanup Function: useEffect can optionally return a cleanup function. 
     This function runs before the effect is re-executed (before every update) and when the component is unmounted. 
     It’s used to clean up any resources or subscriptions created by the effect to prevent memory leaks.


8. What are Higher-Order Components?
Ans: Higher-Order Components (HOCs) are functions in React that take a component as an argument and return a new component. 
     They allow code reuse by adding additional functionality to the original component without modifying it directly.

9. What is useContext Hook?
Ans: Context enables passing data/state through the component tree without manual prop passing. 
     It’s for sharing global data like user authentication or theme.
     example: const authContext = useContext(initialValue);
     In the code we have created a auth component and a ContextProvider to wrap our app, we can use the provider to wrap the component as well
     where we want to use context. 
     #first we created AuthContext then a provider and wrapped the whole application with the provider so that we could access it globally.
     # secondly the we have destructured the context in header and used accordindly.
     
10. What is useMemo Hook?
Ans: useMemo hook is used to get the memoized value of a function in react components. 
     It works on the concept of memoization which refers to caching the output of a function for a given argument to 
     save the computation time thus, improves the application performance. 
     It returns a memoized value and prevents the application from unnecessary re-renders. 
     It is useful in heavy computations and processes when using functional components.
     const memoizedValue = useMemo(functionThatReturnsValue, arrayDependencies)
     #const squaredNum = useMemo(() => {
          return squareNum(number);
               },[number]);
     here number is our useState current value. so this functions will only work or get render if the input value changes only. 

11. What is React.memo() ?
Ans: React.memo() is a higher-order component (HOC) provided by React that memoizes functional components.
     It means that it caches the result of the component’s rendering based on its props, and re-renders only when the props have changed.
     const MemoizedComponent = React.memo(FunctionalComponent);














